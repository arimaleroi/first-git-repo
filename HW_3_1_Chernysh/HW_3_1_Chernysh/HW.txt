List лучше использовать, если нужно добавить элементы в конец списка, его минусы это то, что он представляет
из себя обычный массив и добавления элементов в середину, приведёт к созданию нового массива и копированию данных,
что негативно повлияет на производительность.

LinkedList лучше использовать, если нужно добавлять/удалять элементы в любой части списка в большом количестве
со сложностью О(1)

Dictionary хранит данные в виде ключ-значение, позволяет очень быстро вставлять элементы и получать их по ключу
со сложностью O(1)

Stack (стек) и Queue (очередь)

Stack реализует подход LIFO (last in — first out)
Queue реализует подход (first in - first out)

Очереди и стеки позволяют определить строгую очередность записи и извлечения элементов, так же они полезны,
когда нужно временно хранить какие-то элементы (удалять после извлечения).

Алгоритмические сложности коллекций:

List:
	Add = O(1)
	Insert = O(n)
	Remove, RemoveAt = O(n)
	Indexer, ElementAt(index) = O(1)

LinkedList:
	Add, Insert = O(1)
	Remove, RemoveAt = O(1)
	Indexer, ElementAt(index) = O(n)

Dictionary:
	Add, Insert = O(1), O(n) если коллизия
	Remove, RemoveAt = O(1), O(n) если коллизия
	Indexer, ElementAt(index) = O(1), O(n) если коллизия

Stack и Queue:
	Add, Insert = O(1)







